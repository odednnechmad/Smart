{"version":3,"sources":["components/Addroom.js","components/Homepage.js","components/Room.js","App.js","serviceWorker.js","index.js"],"names":["onRoomAdded","useState","roomType","setRoomType","roomName","setRoomName","roomColor","setRoomColor","for","onChange","e","target","value","style","margin","maxLength","type","placeholder","to","onClick","rooms","history","useHistory","roomsArray","Object","entries","map","key","roomId","id","color","display","fontSize","backgroundColor","border","width","height","cursor","justifyContent","alignItems","marginRight","push","Room","addProduct","useParams","addProductSectionVisible","setAddProductSectionVisible","products","product","setProduct","name","App","setRooms","setNewRoom","className","padding","exact","path","Homepage","component","Addroom","productName","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.30c6ed81.chunk.js","sourcesContent":["import React, { Component, useState } from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nexport default ({ onRoomAdded }) => {\r\n    const [roomType, setRoomType] = useState('bedroom');\r\n    const [roomName, setRoomName] = useState('');\r\n    const [roomColor, setRoomColor] = useState('#000000');\r\n\r\n    const changeRoomType = (e) => {\r\n        setRoomType(e.target.value);\r\n    }\r\n    const changeRoomName = (e) => {\r\n        setRoomName(e.target.value);\r\n    }\r\n    const changeRoomColor = (e) => {\r\n        setRoomColor(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <label for=\"rooms\">Choose a room:</label><br />\r\n            <div>\r\n            <select onChange={changeRoomType} style={{margin:'20px'}}>\r\n                <option value=\"bedroom\">bedroom</option>\r\n                <option value=\"bathroom\">bathroom</option>\r\n                <option value=\"kitchen\">kitchen</option>\r\n            </select>\r\n            </div>\r\n            <input onChange={changeRoomName} maxLength='5' type='text' placeholder='New Name' /><br /><br/>\r\n            <input onChange={changeRoomColor} type='color' value={roomColor} />pick a color<br /><br/>\r\n            <button> <Link to='/' onClick={() => onRoomAdded(roomType, roomName, roomColor)}>create</Link></button>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\nexport default ({ rooms }) => {\r\n    const history = useHistory();\r\n    const roomsArray = Object.entries(rooms).map(([key, value]) => ({ roomType: key, roomId: value.id, roomColor: value.color }));\r\n    return (\r\n        <div >\r\n            <div style={{display: 'flex'}}>\r\n            {\r\n                roomsArray.map(({ roomType, roomId, roomColor }) => (\r\n                    <div\r\n                        style={{\r\n                            fontSize: '20px',\r\n                            backgroundColor: roomColor,\r\n                            border: '1px solid black',\r\n                            width: '100px',\r\n                            height: '100px',\r\n                            cursor: 'pointer',\r\n                            display: 'flex',\r\n                            justifyContent: 'center',\r\n                            alignItems: 'center',\r\n                            marginRight: '10px'\r\n                        }}\r\n                        onClick={() => {history.push(`/room/${roomType}`)}}>\r\n                        {roomType}\r\n                    </div>\r\n                ))\r\n            }\r\n            </div>\r\n            <div style={{ fontSize: '50px' }}>\r\n                <Link to='/Addroom'>+</Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nexport default function Room({ rooms, addProduct }) {\r\n    const { roomId } = useParams();\r\n    const [addProductSectionVisible, setAddProductSectionVisible] = useState(false);\r\n    const { id, products } = rooms[roomId];\r\n    const [product, setProduct] = useState('');\r\n\r\n    const addProductType = (e) => {\r\n        setProduct(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            Room name: {id}<br />\r\n            Room type: {roomId}<br />\r\n            Products: {products.map((name) => <div>{name}</div>)}\r\n            <button onClick={() => { setAddProductSectionVisible(true) }}>Add</button>\r\n            {\r\n                addProductSectionVisible && (\r\n                    <div>\r\n                        <select onChange={addProductType} style={{ margin: '20px' }}>\r\n                            <option value=\"AC\" >AC</option>\r\n                            <option value=\"Water tank\">Water tank</option>\r\n                            <option value=\"Stereo\">Stereo</option>\r\n                            <option value=\"lamp\">Lamp</option>\r\n                        </select>\r\n                        <button onClick={() => addProduct(roomId, product)}>Add Product</button>    \r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React, {useState} from 'react'\nimport './App.css';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\nimport Addroom from './components/Addroom.js'\nimport Homepage from './components/Homepage';\nimport Room from './components/Room.js'\n\n\nexport default function App() {\n\n  /*add room js*/\n   const [rooms, setRooms] = useState({});\n   const setNewRoom = (roomType, roomId, roomColor) => {\n    setRooms( {...rooms,[roomType]: {id: roomId, color: roomColor, products: []}});\n  };\n  /*add product js*/\n  const addProduct = (roomId, productName) => {\n    rooms[roomId].products.push(productName);\n    setRooms({...rooms});\n  };\n \n \n  return (\n    <div className=\"App\" style={{ border: 'green solid 4px', margin:' 30px auto', width:'fit-content', padding: '20px'}}>\n    <h1 style={{width:'fit-content'}}>Smart House</h1>\n    <Router>\n      <Switch>\n        <Route exact path='/'>\n          <Homepage rooms={rooms}  /> \n        </Route>\n        <Route exact path='/addroom' component={() => { return <Addroom onRoomAdded={setNewRoom} /> }} />\n        <Route exact path='/room/:roomId'>\n          <Room rooms={rooms} addProduct={addProduct} /> \n        </Route>\n      </Switch>\n    </Router>\n  </div>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}